<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    <!--  Spring配置：事务管理、通知aop  -->
    <!--  读取db.properties  -->
    <context:property-placeholder location="classpath:db.properties"/>



    <!--  配置数据源  -->
    <bean id="dataSource"
          class="org.apache.commons.dbcp2.BasicDataSource">
        <!--    数据库驱动    -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!--    连接数据库的url    -->
        <property name="url" value="${jdbc.url}"/>
        <!--    连接数据库的用户名    -->
        <property name="username" value="${jdbc.username}"/>
        <!--     连接数据库的密码   -->
        <property name="password" value="${jdbc.password}"/>
        <!--     最大连接数   -->
        <property name="maxTotal" value="${jdbc.maxTotal}"/>
        <!--     最大空闲数   -->
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <!--     初始化连接数   -->
        <property name="initialSize" value="${jdbc.initialSize}"/>

    </bean>

    <!--  事务管理器  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--    数据源    -->
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 切面 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* com.design.service.*.*(..))"/>
    </aop:config>


    <!--  MyBatis配置 -->
    <!--    配置MyBatis的工厂-->
    <bean class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!--      数据源    连接池     -->
        <property name="dataSource" ref="dataSource"/>
        <property name="globalConfig" ref="globalConfiguration"/>
        <!--    配置MyBatis的核心配置文件所在位置   别名 -->
<!--        <property name="configLocation" value="classpath:mybatis-config.xml"/>-->
    </bean>
<!--mybatis-plus 扫描配置-->
    <bean id="globalConfiguration" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <property name="metaObjectHandler" ref="myMetaObjectHandler"/>
    </bean>

    <bean id="myMetaObjectHandler" class="com.design.Handler.MyMetaObjectHandler" />



<!--    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">-->
<!--        &lt;!&ndash; 注入公共字段填充处理器 &ndash;&gt;-->
<!--        &lt;!&ndash; 注入公共字段填充处理器 &ndash;&gt;-->
<!--        -->
<!--    </bean>-->




    <!--  接口开发，扫描 com.design.dao包，写在此包下的接口即可被扫描到  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.design.dao"/>
    </bean>

    <!-- 6.开启注解AOP (前提是引入aop命名空间和相关jar包) -->
    <aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"></aop:aspectj-autoproxy>

    <!-- 7.开启aop，对类代理强制使用cglib代理 -->
    <aop:config proxy-target-class="true"></aop:config>
    <!--  配置扫描@Service注解  -->
    <context:component-scan base-package="com.design">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>












    <!--  shiro相关  -->


    <!-- 自定义Realm -->
    <bean id="myRealm" class="com.design.realm.MyRealm"/>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
    </bean>

    <!-- Shiro过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/index"/>

        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>

                / = anon
                /index = anon
                /login = anon
                /static/** = anon
                /user/logout = anon
                /data/** = anon
                /** = authc,rolechosenfilter
<!--                /superadminPage=roles[SUPERADMIN]-->
<!--                /chooseRolePage=roles[USER]-->


            </value>
        </property>

        <property name="filters">

            <map>
                <entry key="rolechosenfilter">

                    <bean class="com.design.filter.rolechosenfilter">

                    </bean>
                </entry>
            </map>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
<!--        <property name="proxyTargetClass" value="true"/>-->
<!--    </bean>-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.baomidou.mybatisplus.samples.quickstart.mapper"/>
    </bean>



</beans>
