<!--<!DOCTYPE web-app PUBLIC-->
<!--        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"-->
<!--        "http://java.sun.com/dtd/web-app_2_3.dtd" >-->

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                              http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         id="WebApp_ID" version="3.1"
>
  <display-name>Archetype Created Web Application</display-name>

  <!-- 配置加载 Spring文件的监听器 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener
    </listener-class>
  </listener>

  <!--编码过滤器-->
  <filter>
    <filter-name>encoding</filter-name>
    <filter-class>
      org.springframework.web.filter.CharacterEncodingFilter
    </filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encoding</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--  配置Spring MVC前端核心控制器-->
  <servlet>
    <servlet-name>crm</servlet-name>
    <servlet-class>
      org.springframework.web.servlet.DispatcherServlet
    </servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc-config.xml</param-value>
    </init-param>
    <!--  配置服务器启动后立即加载Spring MVC配置文件  -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>crm</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>


  <!--  &lt;!&ndash; 正常拦截html,js,cssSpringMVC配置 激活 Tomcat 的 defaultServlet 来处理静态资源-->
  <!--  注意:/ 会匹配所有url，但不包括 * .jsp，* .html，* .js这样的文件这样的文件。也就是*.jsp不会进入Spring的DispatcherServlet-->
  <!--  &ndash;&gt;-->
<!--    <servlet-mapping>-->
<!--      <servlet-name>default</servlet-name>-->
<!--      <url-pattern>*.css</url-pattern>-->
<!--    </servlet-mapping>-->
<!--    <servlet-mapping>-->
<!--      <servlet-name>default</servlet-name>-->
<!--      <url-pattern>*.js</url-pattern>-->
<!--    </servlet-mapping>-->
<!--    <servlet-mapping>-->
<!--      <servlet-name>default</servlet-name>-->
<!--      <url-pattern>*.png</url-pattern>-->
<!--    </servlet-mapping>-->

<!--    <servlet-mapping>-->
<!--      <servlet-name>default</servlet-name>-->
<!--      <url-pattern>*.jpg</url-pattern>-->
<!--    </servlet-mapping>-->

<!--    <servlet-mapping>-->
<!--      <servlet-name>default</servlet-name>-->
<!--      <url-pattern>*.gif</url-pattern>-->
<!--    </servlet-mapping>-->
<!--    <servlet-mapping>-->
<!--      <servlet-name>default</servlet-name>-->
<!--      <url-pattern>*.html</url-pattern>-->
<!--    </servlet-mapping>-->

  <!--  shiro配置-->
  <!-- shiro的filter -->
  <!-- shiro过虑器，DelegatingFilterProxy通过代理模式将spring容器中的bean和filter关联起来 -->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <!-- 设置true由servlet容器控制filter的生命周期 -->
    <init-param>
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
    <!-- 设置spring容器filter的bean id，如果不设置则找与filter-name一致的bean-->
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>shiroFilter</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!-- 系统默认界面 -->
  <welcome-file-list>
    <welcome-file>/WEB-INF/jsp/index.jsp</welcome-file>
  </welcome-file-list>


</web-app>
